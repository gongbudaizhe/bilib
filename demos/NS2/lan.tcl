# bus.tcl
#
# Copyright (C) 2014 bily Huazhong University of Science and Technology
#
# Distributed under terms of the MIT license.

# topology should be one of BUS,STAR,RING,MESH
set opt(topology) [lindex $argv 0]
set opt(node) 8
set out $opt(topology)

proc finish {} {
	global ns_ nf nd out
	$ns_ flush-trace
	close $nf
	close $nd

    #process NAM in deamon way 
	exec nam $out.nam &
	exit 0
}

proc create-topology {} {
	global ns_ opt
	global lan node_
    
    if {$opt(topology) == "BUS"} {
        # Create nodes
        set num [expr $opt(node) - 1]
        for {set i 0} {$i < $num} {incr i} {
            set node_($i) [$ns_ node]
            lappend nodelist $node_($i)
        }
        set lan [$ns_ newLan $nodelist 2Mb 10ms \
                -llType LL -ifqType Queue/DropTail \
                -macType Mac/802_3 -chanType Channel]

        set node_($num) [$ns_ node]
        $ns_ duplex-link $node_($num) $node_(0) 2Mb 10ms DropTail
        $ns_ duplex-link-op $node_($num) $node_(0) orient right
    } elseif {$opt(topology) == "STAR"} {
        # Create nodes
        set num [expr $opt(node) - 1]
        for {set i 0} {$i < $num} {incr i} {
            set node_($i) [$ns_ node]
            lappend nodelist $node_($i)
        }
        set node_($num) [$ns_ node]
        
        foreach n $nodelist {
            $ns_ duplex-link $node_($num) $n 2Mb 10ms DropTail
        }
    } elseif {$opt(topology) == "RING"} {
        # Create nodes
        set num $opt(node)
        for {set i 0} {$i < $num} {incr i} {
            set node_($i) [$ns_ node]
        }
        # Create ring topology
        for {set i 0} {$i < $num} {incr i} {
            set j [expr ($i + 1) % $num]
            $ns_ simplex-link $node_($i) $node_($j) \
                              2Mb 10ms DropTail
        }
    } elseif {$opt(topology) == "MESH"} {
        # Create nodes
        set num $opt(node)
        for {set i 0} {$i < $num} {incr i} {
            set node_($i) [$ns_ node]
        }
        for {set i [expr $num - 1]} {$i > 0 } {incr i -1} {
            for {set j 0} {$j < $i} {incr j} {
                $ns_ duplex-link $node_($i) $node_($j) \
                                  2Mb 10ms DropTail
            }
        }
    }
}

## MAIN ##
# Create a simulator
set ns_ [new Simulator]

#set different flow with different color
$ns_ color 1 Blue
$ns_ color 2 Red

#start a NAM file
set nf [open $out.nam w]
$ns_ namtrace-all $nf

#start a trace file to record the process of packet transform
set nd [open $out.tr w]
$ns_ trace-all $nd

# Create topology
create-topology
# Add cbr connections to nodes
# the connections is generated randomly by 
# ~ns/indep-utils/cmu-scen-gen/cbrgen.tcl
# Generation commands:
# cd ~ns/indep-utils/cmu-scen-gen/cbrgen.tcl 
# ns cbrgen.tcl -type cbr -nn 7 -seed 1.0 -mc 28 -rate 4.0 > cbr-8-test
# ns cbrgen.tcl -type tcp -nn 7 -seed 1.0 -mc 28 -rate 4.0 > tcp-8-test
source cbr-8-test
source tcp-8-test

foreach name [array names udp_] {
    $udp_($name) set fid_ 1
}
foreach name [array names tcp_] {
    $tcp_($name) set fid_ 2
}

# call finish proc to end the simulation
# We use 180.0 here, since it is the same as 
# the maximum start time generated by cbrgen.tcl
$ns_ at 180.0 "finish" 
$ns_ run
